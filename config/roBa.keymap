#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <300>;
};

&sl { release-after-ms = <180>; };

/ {
    combos {
        compatible = "zmk,combos";

        single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <21 20>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <33 32>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        op {
            bindings = <&kp MINUS>;
            key-positions = <9 8>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <35 36>;
        };

        brackets {
            bindings = <&brackets>;
            key-positions = <7 6>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <19 18>;
        };

        parenthesis {
            bindings = <&parenthesis>;
            key-positions = <31 30>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET>;
            label = "BRACKETS";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE>;
            label = "BRACES";
        };

        parenthesis: parthens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS>;
            label = "PARTHENS";
        };

        lgts: lgts {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN>;
            label = "LGTS";
        };

        cmd_space: cmd_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>;
            label = "CMD_SPACE";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LEFT_BRACKET>;
            label = "BRACKET";
        };

        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LG(NUMBER_4))>;
            label = "SCREENSHOT";
        };

        macro_left_click: macro_left_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mkp LCLK>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mkp LCLK>,
                <&macro_tap>,
                <&tog_off 4 &sl 4>;

            label = "MACRO_LEFT_CLICK";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W     &kp E         &kp R             &kp T                                           &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A             &kp S     &kp D         &kp F             &kp G      &msc SCRL_UP          &kp K_APP      &kp H        &kp J  &kp K      &kp L       &kp SEMICOLON
&mt LEFT_SHIFT Z  &kp X     &kp C         &kp V             &kp B      &msc SCRL_DOWN        &kp DEL        &kp N        &kp M  &kp COMMA  &kp PERIOD  &mt RIGHT_SHIFT SLASH
&kp LEFT_CONTROL  &kp LWIN  &kp LEFT_ALT  &lt 3 LANGUAGE_2  &kp SPACE  &lt 2 LANGUAGE_1      &kp BACKSPACE  &lt 1 ENTER                                &kp ESC
            >;
        };

        NUM_BLE {
            bindings = <
&trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_EQUAL                               &none          &none     &none     &none      &none
&trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MULTIPLY  &kp KP_PLUS       &trans  &kp PAGE_UP    &mkp MB1  &kp UP    &mkp MB2   &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_SLASH     &kp KP_MINUS      &trans  &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &kp KP_NUMBER_0  &kp KP_DOT       &trans           &trans           &trans            &trans  &trans                                        &trans
            >;
        };

        SYM {
            bindings = <
&bt BT_CLR_ALL   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                                   &trans        &trans                &trans                 &trans          &trans
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6      &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &kp MINUS       &kp EQUAL
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT   &kp CARET         &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp PLUS
&trans           &trans        &trans        &trans        &trans        &trans            &trans         &trans                                                                     &trans
            >;
        };

        ARROW {
            bindings = <
&trans     &trans  &trans        &trans  &trans                                 &none   &none   &none    &none    &trans
&trans     &trans  &trans        &trans  &trans  &kp C_VOLUME_UP        &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans     &trans  &trans        &trans  &trans  &kp C_VOLUME_DOWN      &kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6
&kp LCTRL  &trans  &kp LEFT_ALT  &trans  &trans  &trans                 &trans  &trans                            &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans             &mo 6   &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &macro_left_click  &mo 5   &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans             &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                       &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        SNIPE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans             &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &macro_left_click  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans             &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                       &trans
            >;
        };
    };
};
